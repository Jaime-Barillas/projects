{:paths []
 :tasks
 {:requires ([babashka.fs :as fs]
             [babashka.process :as proc])
  :init (do
          (defn red [msg] (format "\u001b[91m%s\u001b[0m" msg))
          ;; podman only.
          (defn try-cmd-if-exists [subcmd entity & args]
            (try
              (proc/shell {} "podman" subcmd "exists" entity)
              (try
                (apply proc/shell {} "podman" subcmd (concat args [entity]))
                (catch Exception ex
                  (println (red "Error:") (ex-message ex))
                  false))
              (catch Exception _))
            true))

  -proj-name "robobots_clj"
  -image-db "docker.io/library/postgres:17.5-alpine3.21"
  -image-be "docker.io/library/clojure:temurin-24-tools-deps-1.12.0.1530-alpine"

  -cmd
  {:doc "Checks for podman."
   :task (let [cmd (fs/which "podman")]
           (when-not cmd
             (println (red "Error:") "`podman` command not found!")
             (System/exit 1))
           cmd)}

  ;; Works for both docker and podman.
  -exists
  {:doc "Returns `name` if it exists, else `nil`."
   :depends [-cmd]
   :task (fn -exists [kind name]
           (let [container? (= kind "container")
                 name-template (if container? "{{.Names}}" "{{.Name}}")
                 format (str "'table " name-template "'")
                 args [kind "ls" "--format" format]]
             (->> (if container? (conj args "--all") args)
               (apply proc/shell {:out :string} -cmd)
               :out
               (re-find (re-pattern name)))))}

  setup-network
  {:doc "Creates container network."
   :depends [-proj-name -cmd -exists]
   :task (let [network -proj-name]
           (if (-exists "network" network)
             (println "Network" network "already exists")
             (proc/shell {} -cmd "network" "create" network))
           network)}

  setup-pod
  {:doc "Creates a container pod for the project."
   :depends [-proj-name -cmd setup-network]
   :task (let [pod -proj-name]
           (try
             (proc/shell {} -cmd "pod" "exists" pod)
             (println "Pod" pod "already exists")
             (catch Exception _
               (proc/shell {}
                 -cmd
                 "pod"
                 "create"
                 "--infra-name" (str -proj-name "_infra")
                 "--network" setup-network
                 pod)))
           pod)}

  setup-secret-postgres
  {:doc "Creates a container secret for the postgres db."
   :depends [-proj-name -cmd -exists]
   :task (let [secret (str -proj-name "_postgres")]
           (if (-exists "secret" secret)
             (println "Secret" secret "already exists")
             (proc/shell {}
               -cmd
               "secret"
               "create"
               secret
               ".secrets/postgres-password"))
           secret)}

  setup-volume-postgres
  {:doc "Creates a volume for the postgres db."
   :depends [-proj-name -cmd -exists]
   :task (let [volume (str -proj-name "_postgres")]
           (if (-exists "volume" volume)
             (println "Volume" volume "already exists")
             (proc/shell {}
               -cmd
               "volume"
               "create"
               volume))
           volume)}

  setup-container-postgres
  {:doc "Create the postgres container."
   :depends [-proj-name
             -cmd
             -exists
             -image-db
             setup-pod
             setup-secret-postgres
             setup-volume-postgres]
   :task (let [container (str -proj-name "_db")]
           (if (-exists "container" container)
             (println "Container" container "already exists")
             (proc/shell {}
               -cmd
               "container"
               "create"
               "--name" container
               "--pod" setup-pod
               "--env" "POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password"
               "--mount" (str "type=volume"
                              ",src=" setup-volume-postgres
                              ",dst=/var/lib/postgresql/data")
               "--secret" (str setup-secret-postgres ",target=postgres-password")
               "--shm-size" "128m"
               -image-db))
           container)}

  setup-container-be
  {:doc "Create the backend container."
   :depends [-proj-name -cmd -image-be setup-pod]
   :task (let [container (str -proj-name "_be")]
           (if (-exists "container" container)
             (println "Container" container "already exists")
             (proc/shell {}
               -cmd
               "container"
               "create"
               "--name" container
               "--pod" setup-pod
               -image-be))
           container)}

  setup
  {:doc "Runs all setup tasks."
   :depends [-cmd
             setup-network
             setup-pod
             setup-secret-postgres
             setup-volume-postgres
             setup-container-postgres
             setup-container-be]
   :task (println "Setup complete!")}

  remove-all
  {:doc "Remove all networks, pods, secrets, volumes, and containers."
   :depends [-proj-name -cmd -exists]
   :task (let [network -proj-name
               pod -proj-name
               secret (str -proj-name "_postgres")
               volume (str -proj-name "_postgres")
               db-container (str -proj-name "_db")
               be-container (str -proj-name "_be")]

           (when-not (try-cmd-if-exists "pod" pod "rm" "--force" "--time" "60")
             ;; Rest of commands will fail.
             (System/exit 1))

           (when (-exists "volume" volume)
             (proc/shell {} -cmd "volume" "rm" volume))

           (proc/shell {} -cmd "secret" "rm" "--ignore" secret)

           (when (-exists "network" network)
             (proc/shell {} -cmd "network" "rm" network))

           (println "Removal complete!"))}

  start
  {:doc "Starts all project containers"
   :depends [-proj-name -cmd]
   :task (proc/shell {} -cmd "pod" "start" -proj-name)}

  stop
  {:doc "Stops all project containers"
   :depends [-proj-name -cmd]
   :task (proc/shell {} -cmd "pod" "stop" -proj-name)}

  }}
